pragma experimental ABIEncoderV2;
contract C {
    function f(bytes[] calldata a) external returns(uint, uint, bytes memory) {
        bytes memory m = a[0];
        return (a.length, m.length, m);
    }
}

// ----
// f(bytes[]): 0x20, 1, 0x20, 2, bytes{'a', 'b'} + bytes(30, 0) -> 1, 2, 0x60, 2, bytes{'a','b'} + bytes(30, 0
// f(bytes[]):"32, 1, 32, 2, [61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]" -> "1, 2, 96, 2, [61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]"
// f(bytes[]): 0x20, 1, 0x20, 32, bytes(32, 'x') -> 1, 32, 0x60, 32, bytes(32, 'x'
// f(bytes[]):"32, 1, 32, 32, [78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78]" -> "1, 32, 96, 32, [78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78]"
// f(bytes[]): 0x20, 1, 0x20, 32, x_zero_a -> 1, 32, 0x60, 32, x_zero_a
// f(bytes[]):"32, 1, 32, 32, [78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61]" -> "1, 32, 96, 32, [78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61]"
// f(bytes[]): 0x20, 1, 0x20, 32, a_zero_x -> 1, 32, 0x60, 32, a_zero_x
// f(bytes[]):"32, 1, 32, 32, [61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78]" -> "1, 32, 96, 32, [61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78]"
// f(bytes[]): 0x20, 1, 0x20, 32, a_m_x -> 1, 32, 0x60, 32, a_m_x
// f(bytes[]):"32, 1, 32, 32, [61,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,78]" -> "1, 32, 96, 32, [61,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,6d,78]"
