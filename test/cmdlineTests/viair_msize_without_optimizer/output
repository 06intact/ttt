
======= viair_msize_without_optimizer/input.sol:C =======
EVM assembly:
  mstore(0x40, 0x80)
  jumpi(tag_3, callvalue)
  tag_5
  tag_1
  jump	// in
tag_5:
  dataSize(sub_0)
  dataOffset(sub_0)
  dup3
  codecopy
  dataSize(sub_0)
  swap1
  return
tag_3:
  tag_2
  jump	// in
tag_1:
  mload(0x40)
  swap1
  jump	// out
tag_2:
  0x00
  dup1
  revert
stop

sub_0: assembly {
      mstore(0x40, 0x80)
      jumpi(tag_11, iszero(lt(calldatasize, 0x04)))
    tag_12:
      tag_8
      jump	// in
    tag_11:
      tag_13
      calldataload(0x00)
      tag_1
      jump	// in
    tag_13:
      0x26121ff0
      sub
      tag_12
      jumpi
      tag_7
      jump	// in
    tag_1:
      0xe0
      shr
      swap1
      jump	// out
    tag_2:
      mload(0x40)
      swap1
      jump	// out
    tag_3:
      0x00
      dup1
      revert
    tag_4:
      0x00
      dup1
      revert
    tag_5:
      0x00
      swap2
      sub
      slt
      tag_16
      jumpi
      jump	// out
    tag_16:
      tag_4
      jump	// in
    tag_6:
      0x00
      add
      swap1
      jump	// out
    tag_7:
      jumpi(tag_18, callvalue)
      tag_20
      calldatasize
      0x04
      tag_5
      jump	// in
    tag_20:
      tag_21
      tag_10
      jump	// in
    tag_21:
      tag_22
      tag_2
      jump	// in
    tag_22:
      dup1
      tag_23
      dup2
      tag_6
      jump	// in
    tag_23:
      sub
      swap1
      return
    tag_18:
      tag_3
      jump	// in
    tag_8:
      0x00
      dup1
      revert
    tag_9:
      mload(0x00)
      swap1
      jump	// out
    tag_10:
      tag_24
      tag_9
      jump	// in
    tag_24:
      0x00
      mstore
      jump	// out

    auxdata: <AUXDATA REMOVED>
}

Optimized IR:
/// @use-src 0:"viair_msize_without_optimizer/input.sol"
object "C_7" {
    code {
        {
            mstore(64, memoryguard(0x80))
            if callvalue()
            {
                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            }
            let _1 := allocate_unbounded()
            codecopy(_1, dataoffset("C_7_deployed"), datasize("C_7_deployed"))
            return(_1, datasize("C_7_deployed"))
        }
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
    }
    /// @use-src 0:"viair_msize_without_optimizer/input.sol"
    object "C_7_deployed" {
        code {
            {
                mstore(64, memoryguard(0x80))
                if iszero(lt(calldatasize(), 4))
                {
                    let selector := shift_right_unsigned(calldataload(0))
                    switch selector
                    case 0x26121ff0 { external_fun_f() }
                    default { }
                }
                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            }
            function shift_right_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function abi_decode(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function abi_encode_tuple(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_f()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode(4, calldatasize())
                fun_f()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function usr$f() -> usr$x
            { usr$x := mload(0) }
            function fun_f()
            { mstore(0, usr$f()) }
        }
        data ".metadata" hex"<BYTECODE REMOVED>"
    }
}
