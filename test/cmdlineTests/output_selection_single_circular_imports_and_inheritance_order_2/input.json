{
    "language": "Solidity",
    "sources": {
        // I2 inherits from IX defined in a separate source. This may or may not fail with "Definition of base
        // has to precede definition of derived contract", depending on the order in which sources are analyzed.
        // We don't guarantee a particular order, only that it's stable.
        // Note that IX sorts after all the other interfaces in alphabetical order.
        "IX.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity *; import {I4} from 'I4.sol'; interface IX {}"},
        "I2.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity *; import {IX} from 'IX.sol'; interface I2 is IX {}"},
        "I3.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity *; import {I2} from 'I2.sol'; interface I3 {}"},
        "I4.sol": {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity *; import {S}  from 'S.sol';  interface I4 {}"},
        "S.sol":  {"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity *; import {I3} from 'I3.sol'; struct    S  { uint x; }"}
    },
    "settings": {
        // Selecting only a single contract must not affect analysis order.
        // It must trigger the error if the test selecting all outputs does not trigger it and vice=versa.
        "outputSelection": {"IX.sol": {"*": []}}
    }
}
